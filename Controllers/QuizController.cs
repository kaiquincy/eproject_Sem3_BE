using Microsoft.AspNetCore.Mvc;
using CareerGuidancePlatform.Models;

namespace CareerGuidancePlatform.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class QuizController : ControllerBase
    {
        private readonly Dictionary<string, List<string>> _careerJobRoles = new()
        {
            ["Software Developer"] = new List<string> {
                "Web Developer",
                "Mobile App Developer",
                "AI/ML Engineer",
                "Game Developer"
            },
            ["Graphic Designer"] = new List<string> {
                "UI/UX Designer",
                "Brand Identity Designer",
                "Illustrator",
                "Motion Graphics Designer"
            },
            ["Marketing Specialist"] = new List<string> {
                "Digital Marketer",
                "SEO Specialist",
                "Content Strategist",
                "Social Media Manager"
            },
            ["Data Analyst"] = new List<string> {
                "Business Intelligence Analyst",
                "Data Scientist",
                "Product Analyst",
                "Market Research Analyst"
            },
            ["Human Resources"] = new List<string> {
                "Recruiter",
                "HR Generalist",
                "Training & Development Specialist",
                "Employee Relations Manager"
            }
        };

        // ‚úÖ GET /api/quiz/questions
        [HttpGet("questions")]
        public IActionResult GetQuestions()
        {
            var questions = new List<QuizQuestion>
            {
                new() { Id = 1, QuestionText = "T√¥i th√≠ch l√†m vi·ªác v·ªõi m√°y t√≠nh v√† ph·∫ßn m·ªÅm.", Options = new() { "Kh√¥ng h·ªÅ th√≠ch", "Thi tho·∫£ng th√¥i", "Th∆∞·ªùng xuy√™n", "R·∫•t y√™u th√≠ch" } },
                new() { Id = 2, QuestionText = "T√¥i c·∫£m th·∫•y h·ª©ng th√∫ v·ªõi vi·ªác thi·∫øt k·∫ø h√¨nh ·∫£nh, poster ho·∫∑c video.", Options = new() { "Kh√¥ng h·ª©ng th√∫", "C√≥ m·ªôt ch√∫t", "Kh√° th√≠ch", "C·ª±c k·ª≥ th√≠ch" } },
                new() { Id = 3, QuestionText = "T√¥i th√≠ch ph√¢n t√≠ch d·ªØ li·ªáu v√† t√¨m ra xu h∆∞·ªõng.", Options = new() { "Kh√¥ng quan t√¢m", "Quan t√¢m nh·∫π", "Quan t√¢m nhi·ªÅu", "R·∫•t ƒëam m√™" } },
                new() { Id = 4, QuestionText = "T√¥i c√≥ k·ªπ nƒÉng l·∫≠p tr√¨nh ho·∫∑c hi·ªÉu bi·∫øt v·ªÅ c√¥ng ngh·ªá.", Options = new() { "Kh√¥ng c√≥", "C∆° b·∫£n", "Kh√° t·ªët", "R·∫•t th√†nh th·∫°o" } },
                new() { Id = 5, QuestionText = "T√¥i gi·ªèi giao ti·∫øp v√† thuy·∫øt tr√¨nh tr∆∞·ªõc ƒë√°m ƒë√¥ng.", Options = new() { "R·∫•t k√©m", "Kh√° e ng·∫°i", "T·ª± tin v·ª´a ph·∫£i", "R·∫•t t·ª± tin" } },
                new() { Id = 6, QuestionText = "T√¥i gi·ªèi t∆∞ duy logic v√† suy lu·∫≠n ph√¢n t√≠ch.", Options = new() { "Kh√¥ng gi·ªèi", "Trung b√¨nh", "Kh√° t·ªët", "R·∫•t gi·ªèi" } },
                new() { Id = 7, QuestionText = "T√¥i mu·ªën l√†m c√¥ng vi·ªác gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c.", Options = new() { "Kh√¥ng mu·ªën", "C≈©ng ƒë∆∞·ª£c", "Th√≠ch", "R·∫•t th√≠ch" } },
                new() { Id = 8, QuestionText = "T√¥i quan t√¢m ƒë·∫øn s·ª± s√°ng t·∫°o v√† t·ª± do trong c√¥ng vi·ªác.", Options = new() { "Kh√¥ng c·∫ßn", "M·ªôt ch√∫t", "C√≥", "R·∫•t quan tr·ªçng" } },
                new() { Id = 9, QuestionText = "T√¥i coi tr·ªçng m√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, c·∫°nh tranh.", Options = new() { "Kh√¥ng quan tr·ªçng", "Quan tr·ªçng nh·∫π", "Quan tr·ªçng", "R·∫•t quan tr·ªçng" } },
                new() { Id = 10, QuestionText = "T√¥i l√† ng∆∞·ªùi h∆∞·ªõng ngo·∫°i v√† th√≠ch k·∫øt n·ªëi v·ªõi ng∆∞·ªùi kh√°c.", Options = new() { "Kh√¥ng", "Th·ªânh tho·∫£ng", "Kh√° th∆∞·ªùng", "R·∫•t th∆∞·ªùng" } },
                new() { Id = 11, QuestionText = "T√¥i l√† ng∆∞·ªùi chi ti·∫øt, t·ªâ m·ªâ trong c√¥ng vi·ªác.", Options = new() { "Kh√¥ng t·ªâ m·ªâ", "B√¨nh th∆∞·ªùng", "Kh√° t·ªâ m·ªâ", "R·∫•t t·ªâ m·ªâ" } },
                new() { Id = 12, QuestionText = "T√¥i th√≠ch l√†m vi·ªác nh√≥m h∆°n l√† l√†m vi·ªác m·ªôt m√¨nh.", Options = new() { "Th√≠ch l√†m m·ªôt m√¨nh", "C√≥ th·ªÉ l√†m nh√≥m", "∆Øu ti√™n l√†m nh√≥m", "R·∫•t th√≠ch teamwork" } }
            };

            return Ok(questions);
        }

        // ‚úÖ POST /api/quiz/submit-letter
        [HttpPost("submit-letter")]
        public IActionResult SubmitQuizWithLetters([FromBody] QuizSubmission submission)
        {
            if (submission.Answers == null || submission.Answers.Count != 12)
                return BadRequest("B·∫°n ph·∫£i tr·∫£ l·ªùi ƒë·ªß 12 c√¢u h·ªèi.");

            // Convert A/B/C/D -> 1/2/3/4
            var numericAnswers = submission.Answers.Select(letter =>
                letter.Trim().ToUpper() switch
                {
                    "A" => 1,
                    "B" => 2,
                    "C" => 3,
                    "D" => 4,
                    _ => 0
                }).ToArray();

            if (numericAnswers.Any(x => x == 0))
                return BadRequest("T·ªìn t·∫°i ƒë√°p √°n kh√¥ng h·ª£p l·ªá (ch·ªâ ch·∫•p nh·∫≠n A‚ÄìD).");

            return ProcessScore(numericAnswers);
        }



        // ‚úÖ POST /api/quiz/submit (c≈©, gi·ªØ nguy√™n)
        [HttpPost("submit")]
        public IActionResult SubmitQuiz([FromBody] QuizResponse response)
        {
            if (response.Answers == null || response.Answers.Length != 12)
                return BadRequest("B·∫°n ph·∫£i tr·∫£ l·ªùi ƒë·ªß 12 c√¢u h·ªèi.");

            return ProcessScore(response.Answers);
        }

        // üîÅ T√≠nh ƒëi·ªÉm & tr·∫£ k·∫øt qu·∫£ chung
        private IActionResult ProcessScore(int[] answers)
        {
            int interest = answers[0] + answers[1] + answers[2];
            int skill = answers[3] + answers[4] + answers[5];
            int value = answers[6] + answers[7] + answers[8];
            int personality = answers[9] + answers[10] + answers[11];

            var careerScores = new Dictionary<string, int>
            {
                ["Software Developer"] = interest + skill * 2 + value + personality,
                ["Graphic Designer"] = interest * 2 + skill + value * 2 + personality,
                ["Marketing Specialist"] = interest + skill + value * 2 + personality * 2,
                ["Data Analyst"] = interest * 2 + skill * 2 + personality,
                ["Human Resources"] = interest + value * 3 + personality * 2
            };

            var sortedCareerMatches = careerScores
                .OrderByDescending(c => c.Value)
                .Select(c => new { career = c.Key, score = c.Value })
                .ToList();

            var bestMatch = sortedCareerMatches.First();

            return Ok(new
            {
                bestCareerMatch = bestMatch.career,
                compatibilityScore = bestMatch.score,
                jobRoles = _careerJobRoles[bestMatch.career],
                allCareerMatches = sortedCareerMatches
            });
        }
    }
}
